{"version":3,"sources":["components/Login/index.jsx","state.js","api.js","components/Chat/components/ChatList/components/ChatListItem/index.jsx","components/Chat/components/ChatList/components/Footer.jsx","components/Chat/components/ChatList/index.jsx","components/Chat/components/MessageList/components/InfoMessage.jsx","components/Chat/components/MessageList/components/MessagesLoading.jsx","components/Chat/components/MessageList/components/NoMessages.jsx","components/Chat/components/MessageList/components/ClockIcon.jsx","components/Chat/components/MessageList/components/ReceiverMessage.jsx","components/Chat/components/MessageList/components/SenderMessage.jsx","components/Chat/components/MessageList/index.jsx","components/Chat/components/TypingArea.jsx","utils.js","components/Chat/use-chat-handlers.js","components/Chat/index.jsx","components/LoadingScreen.jsx","App.jsx","hooks.js","index.jsx"],"names":["DEMO_USERS","Login","onLogIn","useState","username","setUsername","error","setError","onSubmit","event","a","preventDefault","className","style","boxShadow","maxWidth","backgroundColor","paddingLeft","paddingRight","borderTopLeftRadius","borderTopRightRadius","paddingTop","borderBottomLeftRadius","borderBottomRightRadius","names","height","type","Toast","minWidth","onClose","show","delay","autohide","Header","src","alt","Body","UsernameSelect","open","setOpen","width","setWidth","ref","useRef","clientRectWidth","current","getBoundingClientRect","useEffect","listener","document","addEventListener","removeEventListener","focus","tabIndex","onClick","o","d","fill","map","name","reducer","state","action","currentRoom","rooms","users","payload","id","online","messages","offset","length","undefined","lastMessage","message","newRooms","forEach","room","initialState","AppContext","createContext","useAppState","useContext","useAppStateContext","useReducer","axios","defaults","withCredentials","url","x","getMe","get","then","data","catch","_","login","password","post","e","Error","response","logOut","getMessages","size","params","reverse","getUsers","ids","addRoom","user1","user2","getRooms","userId","useChatListItemHandlers","useMemo","pseudoUserId","Math","abs","parseInt","split","pop","isUser","usersFiltered","Object","entries","filter","useLastMessage","dispatch","ChatListItem","active","moment","unix","date","format","LogoutButton","onLogOut","col","noinfo","cursor","UserInfo","user","Footer","flex","minHeight","ChatList","processedRooms","roomsList","values","main","other","sort","b","InfoMessage","opacity","fontSize","MessagesLoading","role","NoMessages","ClockIcon","viewBox","aria-hidden","ReceiverMessage","borderRadius","fontWeight","SenderMessage","onUserClicked","MessageList","messageListElement","onLoadMoreMessages","aria-haspopup","aria-expanded","key","from","TypingArea","setMessage","value","onChange","target","placeholder","parseRoomName","populateUsersFromLoadedMessages","require","userIds","keys","newUsers","useChatHandlers","roomId","scrollToTop","useCallback","setTimeout","scrollTop","scrollToBottom","scrollTo","top","scrollHeight","onFetchMessages","prepend","targetUser","Chat","onMessageSend","borderBottom","trim","LoadingScreen","useAppHandlers","onUserLoaded","loading","setLoading","setUser","onError","onLoading","finally","useUser","connected","setConnected","socketRef","socket","disconnect","connect","io","on","console","log","off","useSocket","push","emit","Date","App","showLogin","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1d6c0c3c.chunk.js","sourcesContent":["// @ts-check\r\nimport { Toast } from \"react-bootstrap\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"./style.css\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DEMO_USERS = [\"user001\", \"user002\", \"user003\", \"user004\"];\r\n\r\nexport default function Login({ onLogIn }) {\r\n  const [username, setUsername] = useState(\r\n    () => DEMO_USERS[0]\r\n  );\r\n  const [error, setError] = useState(null);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    onLogIn(username, setError);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"login-form text-center login-page\">\r\n        <div\r\n          className=\"rounded\"\r\n          style={{\r\n            boxShadow: \"0 0.75rem 1.5rem rgba(18,38,63,.03)\",\r\n          }}\r\n        >\r\n          <div className=\"position-relative\">\r\n            <div\r\n              className=\"row no-gutters align-items-center\"\r\n              style={{\r\n                maxWidth: 400,\r\n                backgroundColor: \"rgba(85, 110, 230, 0.25)\",\r\n                paddingLeft: 20,\r\n                paddingRight: 20,\r\n                borderTopLeftRadius: 4,\r\n                borderTopRightRadius: 4,\r\n              }}\r\n            >\r\n              <div className=\"col text-primary text-left\">\r\n                <h3 className=\"font-size-15\">Sign in</h3>\r\n              </div>\r\n              <div className=\"col align-self-end\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <form\r\n            className=\"bg-white text-left px-4\"\r\n            style={{\r\n              paddingTop: 58,\r\n              borderBottomLeftRadius: 4,\r\n              borderBottomRightRadius: 4,\r\n            }}\r\n            onSubmit={onSubmit}\r\n          >\r\n            <label className=\"font-size-12\">Name</label>\r\n\r\n            <div className=\"username-select mb-3\">\r\n              <UsernameSelect\r\n                username={username}\r\n                setUsername={setUsername}\r\n                names={DEMO_USERS}\r\n              />\r\n            </div>\r\n            \r\n            <div style={{ height: 30 }} />\r\n            <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n              Sign in\r\n            </button>\r\n            <div className=\"login-error-anchor\">\r\n              <div className=\"toast-box\">\r\n                <Toast\r\n                  style={{ minWidth: 277 }}\r\n                  onClose={() => setError(null)}\r\n                  show={error !== null}\r\n                  delay={3000}\r\n                  autohide\r\n                >\r\n                  <Toast.Header>\r\n                    <img\r\n                      src=\"holder.js/20x20?text=%20\"\r\n                      className=\"rounded mr-2\"\r\n                      alt=\"\"\r\n                    />\r\n                    <strong className=\"mr-auto\">Error</strong>\r\n                  </Toast.Header>\r\n                  <Toast.Body>{error}</Toast.Body>\r\n                </Toast>\r\n              </div>\r\n            </div>\r\n            <div style={{ height: 30 }} />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst UsernameSelect = ({ username, setUsername, names = [\"\"] }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [width, setWidth] = useState(0);\r\n  const ref = useRef();\r\n  /** @ts-ignore */\r\n  const clientRectWidth = ref.current?.getBoundingClientRect().width;\r\n  useEffect(() => {\r\n    /** @ts-ignore */\r\n    setWidth(clientRectWidth);\r\n  }, [clientRectWidth]);\r\n\r\n  /** Click away listener */\r\n  useEffect(() => {\r\n    if (open) {\r\n      const listener = () => setOpen(false);\r\n      document.addEventListener(\"click\", listener);\r\n      return () => document.removeEventListener(\"click\", listener);\r\n    }\r\n  }, [open]);\r\n\r\n  /** Make the current div focused */\r\n  useEffect(() => {\r\n    if (open) {\r\n      /** @ts-ignore */\r\n      ref.current?.focus();\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <div\r\n      tabIndex={0}\r\n      ref={ref}\r\n      className={`username-select-dropdown ${open ? \"open\" : \"\"}`}\r\n      onClick={() => setOpen((o) => !o)}\r\n    >\r\n      <div className=\"username-select-row\">\r\n        <div>{username}</div>\r\n        <div>\r\n          <svg width={24} height={24}>\r\n            <path d=\"M7 10l5 5 5-5z\" fill=\"#333\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{ width: width }}\r\n        className={`username-select-block ${open ? \"open\" : \"\"}`}\r\n      >\r\n        {names.map((name) => (\r\n          <div\r\n            className=\"username-select-block-item\"\r\n            key={name}\r\n            onClick={() => setUsername(name)}\r\n          >\r\n            {name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// @ts-check\r\nimport { createContext, useContext, useReducer } from \"react\";\r\n\r\n/**\r\n * @typedef {{\r\n *  from: string\r\n *  date: number\r\n *  message: string\r\n *  roomId?: string\r\n * }} Message\r\n *\r\n * @typedef {{\r\n *   name: string;\r\n *   id: string;\r\n *   messages?: Message[]\r\n *   connected?: boolean;\r\n *   offset?: number;\r\n *   forUserId?: null | number | string\r\n *   lastMessage?: Message | null\r\n * }} Room\r\n *\r\n * @typedef {{\r\n *   username: string;\r\n *   id: string;\r\n *   online?: boolean;\r\n *   room?: string;\r\n * }} UserEntry\r\n *\r\n * @typedef {{\r\n *  currentRoom: string;\r\n *  rooms: {[id: string]: Room};\r\n *  users: {[id: string]: UserEntry}\r\n * }} State\r\n *\r\n * @param {State} state\r\n * @param {{type: string; payload: any}} action\r\n * @returns {State}\r\n */\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"clear\":\r\n      return { currentRoom: \"0\", rooms: {}, users: {} };\r\n    case \"set user\": {\r\n      return {\r\n        ...state,\r\n        users: { ...state.users, [action.payload.id]: action.payload },\r\n      };\r\n    }\r\n    case \"make user online\": {\r\n      return {\r\n        ...state,\r\n        users: {\r\n          ...state.users,\r\n          [action.payload]: { ...state.users[action.payload], online: true },\r\n        },\r\n      };\r\n    }\r\n    case \"append users\": {\r\n      return { ...state, users: { ...state.users, ...action.payload } };\r\n    }\r\n    case \"set messages\": {\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            messages: action.payload.messages,\r\n            offset: action.payload.messages.length,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case \"prepend messages\": {\r\n      const messages = [\r\n        ...action.payload.messages,\r\n        ...state.rooms[action.payload.id].messages,\r\n      ];\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            messages,\r\n            offset: messages.length,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case \"append message\":\r\n      if (state.rooms[action.payload.id] === undefined) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            lastMessage: action.payload.message,\r\n            messages: state.rooms[action.payload.id].messages\r\n              ? [\r\n                ...state.rooms[action.payload.id].messages,\r\n                action.payload.message,\r\n              ]\r\n              : undefined,\r\n          },\r\n        },\r\n      };\r\n    case 'set last message':\r\n      return { ...state, rooms: { ...state.rooms, [action.payload.id]: { ...state.rooms[action.payload.id], lastMessage: action.payload.lastMessage } } };\r\n    case \"set current room\":\r\n      return { ...state, currentRoom: action.payload };\r\n    case \"add room\":\r\n      return {\r\n        ...state,\r\n        rooms: { ...state.rooms, [action.payload.id]: action.payload },\r\n      };\r\n    case \"set rooms\": {\r\n      /** @type {Room[]} */\r\n      const newRooms = action.payload;\r\n      const rooms = { ...state.rooms };\r\n      newRooms.forEach((room) => {\r\n        rooms[room.id] = {\r\n          ...room,\r\n          messages: rooms[room.id] && rooms[room.id].messages,\r\n        };\r\n      });\r\n      return { ...state, rooms };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/** @type {State} */\r\nconst initialState = {\r\n  currentRoom: \"main\",\r\n  rooms: {},\r\n  users: {},\r\n};\r\n\r\nconst useAppStateContext = () => {\r\n  return useReducer(reducer, initialState);\r\n};\r\n\r\n// @ts-ignore\r\nexport const AppContext = createContext();\r\n\r\n/**\r\n * @returns {[\r\n *  State,\r\n *  React.Dispatch<{\r\n *   type: string;\r\n *   payload: any;\r\n * }>\r\n * ]}\r\n */\r\nexport const useAppState = () => {\r\n  const [state, dispatch] = useContext(AppContext);\r\n  return [state, dispatch];\r\n};\r\n\r\nexport default useAppStateContext;","import axios from 'axios';\r\naxios.defaults.withCredentials = true;\r\n\r\nconst BASE_URL = '';\r\n\r\nexport const MESSAGES_TO_LOAD = 15;\r\n\r\nconst url = x => `${BASE_URL}${x}`;\r\n\r\n/** Checks if there's an existing session. */\r\nexport const getMe = () => {\r\n  return axios.get(url('/me'))\r\n    .then(x => x.data)\r\n    .catch(_ => null);\r\n};\r\n\r\n/** Handle user log in */\r\nexport const login = (username, password) => {\r\n  return axios.post(url('/login'), {\r\n    username,\r\n    password\r\n  }).then(x =>\r\n    x.data\r\n  )\r\n    .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });\r\n};\r\n\r\nexport const logOut = () => {\r\n  return axios.post(url('/logout'));\r\n};\r\n\r\n/** \r\n * Function for checking which deployment urls exist.\r\n * \r\n * @returns {Promise<{\r\n *   heroku?: string;\r\n *   google_cloud?: string;\r\n *   vercel?: string;\r\n *   github?: string;\r\n * }>} \r\n */\r\nexport const getButtonLinks = () => {\r\n  return axios.get(url('/links'))\r\n    .then(x => x.data)\r\n    .catch(_ => null);\r\n};\r\n\r\n/** This was used to get a random login name (for demo purposes). */\r\nexport const getRandomName = () => {\r\n  return axios.get(url('/randomname')).then(x => x.data);\r\n};\r\n\r\n/**\r\n * Load messages\r\n * \r\n * @param {string} id room id\r\n * @param {number} offset \r\n * @param {number} size \r\n */\r\nexport const getMessages = (id,\r\n  offset = 0,\r\n  size = MESSAGES_TO_LOAD\r\n) => {\r\n  return axios.get(url(`/room/${id}/messages`), {\r\n    params: {\r\n      offset,\r\n      size\r\n    }\r\n  })\r\n    .then(x => x.data.reverse());\r\n};\r\n\r\n/**\r\n * @returns {Promise<{ name: string, id: string, messages: Array<import('./state').Message> }>}\r\n */\r\nexport const getPreloadedRoom = async () => {\r\n  return axios.get(url(`/room/0/preload`)).then(x => x.data);\r\n};\r\n\r\n/** \r\n * Fetch users by requested ids\r\n * @param {Array<number | string>} ids\r\n */\r\nexport const getUsers = (ids) => {\r\n  return axios.get(url(`/users`), { params: { ids } }).then(x => x.data);\r\n};\r\n\r\n/** This one is called on a private messages room created. */\r\nexport const addRoom = async (user1, user2) => {\r\n  return axios.post(url(`/room`), { user1, user2 }).then(x => x.data);\r\n};\r\n\r\n/** \r\n * @returns {Promise<Array<{ names: string[]; id: string }>>} \r\n */\r\nexport const getRooms = async (userId) => {\r\n  return axios.get(url(`/rooms/${userId}`)).then(x => x.data);\r\n};\r\n","// @ts-check\nimport \"./style.css\";\nimport React, { useMemo } from \"react\";\nimport { useAppState } from \"../../../../../../state\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport { getMessages } from \"../../../../../../api\";\n\n/**\n * @param {{ active: boolean; room: import('../../../../../../state').Room; onClick: () => void; }} props\n */\nconst ChatListItem = ({ room, active = false, onClick }) => {\n  const { name, lastMessage } = useChatListItemHandlers(room);\n  return (\n    <div\n      onClick={onClick}\n      className={`chat-list-item d-flex align-items-start rounded ${\n        active ? \"bg-white\" : \"\"\n      }`}\n    >\n      <div className=\"media-body overflow-hidden\">\n        <h5 className=\"text-truncate font-size-14 mb-1\">{name}</h5>\n        {lastMessage && (\n          <p className=\"text-truncate mb-0\"> {lastMessage.message} </p>\n        )}\n      </div>\n      {lastMessage && (\n        <div className=\"font-size-11\">\n          {moment.unix(lastMessage.date).format(\"LT\")}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst useChatListItemHandlers = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const { id, name } = room;\n  const [state] = useAppState();\n\n  /** Here we want to associate the room with a user by its name (since it's unique). */\n  const [isUser, userId] = useMemo(() => {\n    try {\n      let pseudoUserId = Math.abs(parseInt(id.split(\":\").reverse().pop()));\n      const isUser = pseudoUserId > 0;\n      const usersFiltered = Object.entries(state.users)\n        .filter(([, user]) => user.username === name)\n        .map(([, user]) => user);\n      if (usersFiltered.length > 0) {\n        pseudoUserId = +usersFiltered[0].id;\n      }\n      return [isUser, pseudoUserId];\n    } catch (_) {\n      return [false, false, \"0\"];\n    }\n  }, [id, name, state.users]);\n\n  const lastMessage = useLastMessage(room);\n\n  return {\n    isUser,\n    userId,\n    name: room.name,\n    lastMessage,\n  };\n};\n\nconst useLastMessage = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const [, dispatch] = useAppState();\n  const { lastMessage } = room;\n  useEffect(() => {\n    if (lastMessage === undefined) {\n      /** need to fetch it */\n      if (room.messages === undefined) {\n        getMessages(room.id, 0, 1).then((messages) => {\n          let message = null;\n          if (messages.length !== 0) {\n            message = messages.pop();\n          }\n          dispatch({\n            type: \"set last message\",\n            payload: { id: room.id, lastMessage: message },\n          });\n        });\n      } else if (room.messages.length === 0) {\n        dispatch({\n          type: \"set last message\",\n          payload: { id: room.id, lastMessage: null },\n        });\n      } else {\n        dispatch({\n          type: \"set last message\",\n          payload: {\n            id: room.id,\n            lastMessage: room.messages[room.messages.length - 1],\n          },\n        });\n      }\n    }\n  }, [lastMessage, dispatch, room]);\n\n  return lastMessage;\n};\n\nexport default ChatListItem;\n","// @ts-check\n\nimport React from \"react\";\nimport { Power } from \"react-bootstrap-icons\";\n\nconst Footer = ({ user, onLogOut }) => (\n  <div\n    className=\"row no-gutters align-items-center pl-4 pr-2 pb-3\"\n    style={{ height: \"inherit\", flex: 0, minHeight: 50 }}\n  >\n    {true ? (\n      <>\n        <UserInfo user={user} col={8} />\n        <LogoutButton onLogOut={onLogOut} col={4} />\n      </>\n    ) : (\n      <>\n        <LogoutButton noinfo onLogOut={onLogOut} col={8} />\n        <UserInfo noinfo user={user} col={4} />\n      </>\n    )}\n  </div>\n);\n\nconst LogoutButton = ({ onLogOut, col = 5, noinfo = false }) => (\n  <div\n    onClick={onLogOut}\n    style={{ cursor: \"pointer\" }}\n    className={`col-${col} text-danger ${!noinfo ? \"text-right\" : \"\"}`}\n  >\n    <Power /> Log out\n  </div>\n);\n\nconst UserInfo = ({ user, col = 7, noinfo = false }) => (\n  <div\n    className={`col-${col} d-flex align-items-center ${\n      noinfo ? \"justify-content-end\" : \"\"\n    }`}\n  >\n  </div>\n);\n\nexport default Footer;\n","// @ts-check\nimport React, { useMemo } from \"react\";\nimport ChatListItem from \"./components/ChatListItem\";\nimport Footer from \"./components/Footer\";\n\nconst ChatList = ({ rooms, dispatch, user, currentRoom, onLogOut }) => {\n  const processedRooms = useMemo(() => {\n    const roomsList = Object.values(rooms);\n    const main = roomsList.filter((x) => x.id === \"0\");\n    let other = roomsList.filter((x) => x.id !== \"0\");\n    other = other.sort(\n      (a, b) => +a.id.split(\":\").pop() - +b.id.split(\":\").pop()\n    );\n    return [...(main ? main : []), ...other];\n  }, [rooms]);\n  return (\n    <>\n      <div className=\"chat-list-container flex-column d-flex pr-4\">\n        <div className=\"py-2\">\n          <p className=\"h5 mb-0 py-1 chats-title\">Chats</p>\n        </div>\n        <div className=\"messages-box flex flex-1\">\n          <div className=\"list-group rounded-0\">\n            {processedRooms.map((room) => (\n              <ChatListItem\n                key={room.id}\n                onClick={() =>\n                  dispatch({ type: \"set current room\", payload: room.id })\n                }\n                active={currentRoom === room.id}\n                room={room}\n              />\n            ))}\n          </div>\n        </div>\n        <Footer user={user} onLogOut={onLogOut} />\n      </div>\n    </>\n  );\n};\n\nexport default ChatList;\n","// @ts-check\nconst InfoMessage = ({ message }) => {\n  return (\n    <p\n      className=\"mb-2 fs-6 fw-light fst-italic text-black-50 text-center\"\n      style={{ opacity: 0.8, fontSize: 14 }}\n    >\n      {message}\n    </p>\n  );\n};\n\nexport default InfoMessage;\n","// @ts-check\nimport React from \"react\";\n\nconst MessagesLoading = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\" />\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesLoading;\n","// @ts-check\nimport React from \"react\";\nimport { CardText } from \"react-bootstrap-icons\";\n\nconst NoMessages = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <CardText size={96} />\n      <p>No messages</p>\n    </div>\n  );\n};\n\nexport default NoMessages;\n","const ClockIcon = () => (\n  <svg\n    width={12}\n    height={12}\n    className=\"prefix__MuiSvgIcon-root prefix__jss80 prefix__MuiSvgIcon-fontSizeLarge\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </svg>\n);\n\nexport default ClockIcon;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\n\nconst ReceiverMessage = ({\n  username = \"user\",\n  message = \"Lorem ipsum dolor...\",\n  date,\n}) => (\n  <div className=\"d-flex\">\n    <div style={{ flex: 1 }} />\n    <div style={{ width: \"50%\" }} className=\"text-right mb-4\">\n      <div\n        className=\"conversation-list d-inline-block bg-light px-3 py-2\"\n        style={{ borderRadius: 12 }}\n      >\n        <div className=\"ctext-wrap\">\n          <div\n            className=\"conversation-name text-left text-primary mb-1\"\n            style={{\n              fontWeight: 600,\n            }}\n          >\n            {username}\n          </div>\n          <p className=\"text-left\">{message}</p>\n          <p className=\"chat-time mb-0\">\n            <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\nexport default ReceiverMessage;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\n\nconst SenderMessage = ({\n  user,\n  message = \"Lorem ipsum dolor...\",\n  date,\n  onUserClicked,\n}) => (\n  <div className=\"d-flex\">\n    <div style={{ width: \"50%\" }} className=\"text-left mb-4\">\n      <div\n        className=\"conversation-list d-inline-block px-3 py-2\"\n        style={{ borderRadius: 12, backgroundColor: \"rgba(85, 110, 230, 0.1)\" }}\n      >\n        <div className=\"ctext-wrap\">\n          {user && (\n            <div className=\"conversation-name text-primary d-flex align-items-center mb-1\">\n              <div\n                className=\"mr-2\"\n                style={{\n                  fontWeight: 600,\n                  cursor: \"pointer\",\n                }}\n                onClick={onUserClicked}\n              >\n                {user.username}\n              </div>\n            </div>\n          )}\n          <p className=\"text-left\">{message}</p>\n          <p className=\"chat-time mb-0\">\n            <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n    <div style={{ flex: 1 }} />\n  </div>\n);\n\nexport default SenderMessage;\n","// @ts-check\nimport React from \"react\";\nimport { MESSAGES_TO_LOAD } from \"../../../../api\";\nimport InfoMessage from \"./components/InfoMessage\";\nimport MessagesLoading from \"./components/MessagesLoading\";\nimport NoMessages from \"./components/NoMessages\";\nimport ReceiverMessage from \"./components/ReceiverMessage\";\nimport SenderMessage from \"./components/SenderMessage\";\n\nconst MessageList = ({\n  messageListElement,\n  messages,\n  room,\n  onLoadMoreMessages,\n  user,\n  onUserClicked,\n  users,\n}) => (\n  <div\n    ref={messageListElement}\n    className=\"chat-box-wrapper position-relative d-flex\"\n  >\n    {messages === undefined ? (\n      <MessagesLoading />\n    ) : messages.length === 0 ? (\n      <NoMessages />\n    ) : (\n      <></>\n    )}\n    <div className=\"px-4 pt-5 chat-box position-absolute\">\n      {messages && messages.length !== 0 && (\n        <>\n          {room.offset && room.offset >= MESSAGES_TO_LOAD ? (\n            <div className=\"d-flex flex-row align-items-center mb-4\">\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n              <div className=\"mx-3\">\n                <button\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"true\"\n                  type=\"button\"\n                  onClick={onLoadMoreMessages}\n                  className=\"btn rounded-button btn-secondary nav-btn\"\n                  id=\"__BVID__168__BV_toggle_\"\n                >\n                  Load more\n                </button>\n              </div>\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n            </div>\n          ) : (\n            <></>\n          )}\n          {messages.map((message, x) => {\n            const key = message.message + message.date + message.from + x;\n            if (message.from === \"info\") {\n              return <InfoMessage key={key} message={message.message} />;\n            }\n            if (+message.from !== +user.id) {\n              return (\n                <SenderMessage\n                  onUserClicked={() => onUserClicked(message.from)}\n                  key={key}\n                  message={message.message}\n                  date={message.date}\n                  user={users[message.from]}\n                />\n              );\n            }\n            return (\n              <ReceiverMessage\n                username={\n                  users[message.from] ? users[message.from].username : \"\"\n                }\n                key={key}\n                message={message.message}\n                date={message.date}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  </div>\n);\nexport default MessageList;\n","// @ts-check\nconst TypingArea = ({ message, setMessage, onSubmit }) => (\n  <div className=\"p-3 chat-input-section\">\n    <form className=\"row\" onSubmit={onSubmit}>\n      <div className=\"col\">\n        <div className=\"position-relative\">\n          <input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            type=\"text\"\n            placeholder=\"Enter Message...\"\n            className=\"form-control chat-input\"\n          />\n          {/**/}\n        </div>\n      </div>\n      <div className=\"col-auto\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary btn-rounded chat-send w-md\"\n        >\n          <span className=\"d-none d-sm-inline-block mr-2\">Send</span>\n          <svg width={13} height={13} viewBox=\"0 0 24 24\" tabIndex={-1}>\n            <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"white\" />\n          </svg>\n        </button>\n      </div>\n    </form>\n  </div>\n);\n\nexport default TypingArea;\n","// @ts-check\r\n\r\nimport { getUsers } from \"./api\";\r\n\r\n/**\r\n * @param {string[]} names\r\n * @param {string} username\r\n */\r\nexport const parseRoomName = (names, username) => {\r\n  for (let name of names) {\r\n    if (typeof name !== 'string') {\r\n      name = name[0];\r\n    }\r\n    if (name !== username) {\r\n      return name;\r\n    }\r\n  }\r\n  return names[0];\r\n};\r\n\r\n/** Get an avatar for a room or a user */\r\nexport const getAvatarByUserAndRoomId = (roomId = \"1\") => {\r\n  const TOTAL_IMAGES = 13;\r\n  const seed1 = 654;\r\n  const seed2 = 531;\r\n\r\n  const uidParsed = +roomId.split(\":\").pop();\r\n  let roomIdParsed = +roomId.split(\":\").reverse().pop();\r\n  if (roomIdParsed < 0) {\r\n    roomIdParsed += 3555;\r\n  }\r\n\r\n  const theId = (uidParsed * seed1 + roomIdParsed * seed2) % TOTAL_IMAGES;\r\n\r\n  return `${process.env.PUBLIC_URL}/avatars/${theId}.jpg`;\r\n};\r\n\r\nconst jdenticon = require(\"jdenticon\");\r\n\r\nconst avatars = {};\r\nexport const getAvatar = (username) => {\r\n  let av = avatars[username];\r\n  if (av === undefined) {\r\n    av =\r\n      \"data:image/svg+xml;base64,\" + window.btoa(jdenticon.toSvg(username, 50));\r\n    avatars[username] = av;\r\n  }\r\n  return av;\r\n};\r\n\r\nexport const populateUsersFromLoadedMessages = async (users, dispatch, messages) => {\r\n  const userIds = {};\r\n  messages.forEach((message) => {\r\n    userIds[message.from] = 1;\r\n  });\r\n\r\n  const ids = Object.keys(userIds).filter(\r\n    (id) => users[id] === undefined\r\n  );\r\n\r\n  if (ids.length !== 0) {\r\n    /** We need to fetch users first */\r\n    const newUsers = await getUsers(ids);\r\n    dispatch({\r\n      type: \"append users\",\r\n      payload: newUsers,\r\n    });\r\n  }\r\n\r\n};","// @ts-check\nimport { useCallback } from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { addRoom, getMessages } from \"../../api\";\nimport { useAppState } from \"../../state\";\nimport { parseRoomName, populateUsersFromLoadedMessages } from \"../../utils\";\n\n/** Lifecycle hooks with callbacks for the Chat component */\nconst useChatHandlers = (/** @type {import(\"../../state\").UserEntry} */ user) => {\n  const [state, dispatch] = useAppState();\n  const messageListElement = useRef(null);\n\n  /** @type {import(\"../../state\").Room} */\n  const room = state.rooms[state.currentRoom];\n  const roomId = room?.id;\n  const messages = room?.messages;\n\n  const [message, setMessage] = useState(\"\");\n\n  const scrollToTop = useCallback(() => {\n    setTimeout(() => {\n      if (messageListElement.current) {\n        messageListElement.current.scrollTop = 0;\n      }\n    }, 0);\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    if (messageListElement.current) {\n      messageListElement.current.scrollTo({\n        top: messageListElement.current.scrollHeight,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  const onFetchMessages = useCallback(\n    (offset = 0, prepend = false) => {\n      getMessages(roomId, offset).then(async (messages) => {\n        /** We've got messages but it's possible we might not have the cached user entires which correspond to those messages */\n        await populateUsersFromLoadedMessages(state.users, dispatch, messages);\n\n        dispatch({\n          type: prepend ? \"prepend messages\" : \"set messages\",\n          payload: { id: roomId, messages: messages },\n        });\n        if (prepend) {\n          setTimeout(() => {\n            scrollToTop();\n          }, 10);\n        } else {\n          scrollToBottom();\n        }\n      });\n    },\n    [dispatch, roomId, scrollToBottom, scrollToTop, state.users]\n  );\n\n  useEffect(() => {\n    if (roomId === undefined) {\n      return;\n    }\n    if (messages === undefined) {\n      /** Fetch logic goes here */\n      onFetchMessages();\n    }\n  }, [\n    messages,\n    dispatch,\n    roomId,\n    state.users,\n    state,\n    scrollToBottom,\n    onFetchMessages,\n  ]);\n\n  useEffect(() => {\n    if (messageListElement.current) {\n      scrollToBottom();\n    }\n  }, [scrollToBottom, roomId]);\n\n  const onUserClicked = async (userId) => {\n    /** Check if room exists. */\n    const targetUser = state.users[userId];\n    let roomId = targetUser.room;\n    if (roomId === undefined) {\n      // @ts-ignore\n      const room = await addRoom(userId, user.id);\n      roomId = room.id;\n      /** We need to set this room id to user. */\n      dispatch({ type: \"set user\", payload: { ...targetUser, room: roomId } });\n      /** Then a new room should be added to the store. */\n      dispatch({\n        type: \"add room\",\n        // @ts-ignore\n        payload: { id: roomId, name: parseRoomName(room.names, user.username) },\n      });\n    }\n    /** Then a room should be changed */\n    dispatch({ type: \"set current room\", payload: roomId });\n  };\n\n  const onLoadMoreMessages = useCallback(() => {\n    onFetchMessages(room.offset, true);\n  }, [onFetchMessages, room]);\n\n  return {\n    onLoadMoreMessages,\n    onUserClicked,\n    message,\n    setMessage,\n    dispatch,\n    room,\n    rooms: state.rooms,\n    currentRoom: state.currentRoom,\n    messageListElement,\n    roomId,\n    users: state.users,\n    messages,\n  };\n};\nexport default useChatHandlers;","// @ts-check\r\nimport React from \"react\";\r\nimport ChatList from \"./components/ChatList\";\r\nimport MessageList from \"./components/MessageList\";\r\nimport TypingArea from \"./components/TypingArea\";\r\nimport useChatHandlers from \"./use-chat-handlers\";\r\n\r\n/**\r\n * @param {{\r\n *  onLogOut: () => void,\r\n *  onMessageSend: (message: string, roomId: string) => void,\r\n *  user: import(\"../../state\").UserEntry\r\n * }} props\r\n */\r\nexport default function Chat({ onLogOut, user, onMessageSend }) {\r\n  const {\r\n    onLoadMoreMessages,\r\n    onUserClicked,\r\n    message,\r\n    setMessage,\r\n    rooms,\r\n    room,\r\n    currentRoom,\r\n    dispatch,\r\n    messageListElement,\r\n    roomId,\r\n    messages,\r\n    users,\r\n  } = useChatHandlers(user);\r\n\r\n  return (\r\n    <div className=\"container py-5 px-4\">\r\n      <div className=\"chat-body row overflow-hidden shadow bg-light rounded\">\r\n        <div className=\"col-4 px-0 chat-list-box\">\r\n          <ChatList\r\n            user={user}\r\n            onLogOut={onLogOut}\r\n            rooms={rooms}\r\n            currentRoom={currentRoom}\r\n            dispatch={dispatch}\r\n          />\r\n        </div>\r\n        {/* Chat Box*/}\r\n        <div className=\"col-8 px-0 flex-column bg-white rounded-lg\">\r\n          <div className=\"px-4 py-4\" style={{ borderBottom: \"1px solid #eee\" }}>\r\n            <h2 className=\"font-size-15 mb-0\">{room ? room.name : \"Room\"}</h2>\r\n          </div>\r\n          <MessageList\r\n            messageListElement={messageListElement}\r\n            messages={messages}\r\n            room={room}\r\n            onLoadMoreMessages={onLoadMoreMessages}\r\n            user={user}\r\n            onUserClicked={onUserClicked}\r\n            users={users}\r\n          />\r\n\r\n          {/* Typing area */}\r\n          <TypingArea\r\n            message={message}\r\n            setMessage={setMessage}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              onMessageSend(message.trim(), roomId);\r\n              setMessage(\"\");\r\n\r\n              messageListElement.current.scrollTop =\r\n                messageListElement.current.scrollHeight;\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// @ts-check\r\nimport React from \"react\";\r\n\r\nexport function LoadingScreen() {\r\n  return (\r\n    <div className=\"centered-box\">\r\n      <div className=\"spinner-border\" role=\"status\">\r\n        <span className=\"visually-hidden\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// @ts-check\r\nimport React, { useEffect, useCallback } from \"react\";\r\nimport Login from \"./components/Login\";\r\nimport Chat from \"./components/Chat\";\r\nimport { getRooms } from \"./api\";\r\nimport useAppStateContext, { AppContext } from \"./state\";\r\nimport moment from \"moment\";\r\nimport { parseRoomName } from \"./utils\";\r\nimport { LoadingScreen } from \"./components/LoadingScreen\";\r\nimport { useSocket, useUser } from \"./hooks\";\r\n\r\nconst App = () => {\r\n  const {\r\n    loading,\r\n    user,\r\n    state,\r\n    dispatch,\r\n    onLogIn,\r\n    onMessageSend,\r\n    onLogOut,\r\n  } = useAppHandlers();\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  const showLogin = !user;\r\n\r\n  return (\r\n    <AppContext.Provider value={[state, dispatch]}>\r\n      <div\r\n        className={`full-height ${showLogin ? \"bg-light\" : \"\"}`}\r\n        style={{\r\n          backgroundColor: !showLogin ? \"#495057\" : undefined,\r\n        }}\r\n      >\r\n        {showLogin ? (\r\n          <Login onLogIn={onLogIn} />\r\n        ) : (\r\n          <Chat user={user} onMessageSend={onMessageSend} onLogOut={onLogOut} />\r\n        )}\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAppHandlers = () => {\r\n  const [state, dispatch] = useAppStateContext();\r\n  const onUserLoaded = useCallback(\r\n    (user) => {\r\n      if (user !== null) {\r\n        if (!state.users[user.id]) {\r\n          dispatch({ type: \"set user\", payload: { ...user, online: true } });\r\n        }\r\n      }\r\n    },\r\n    [dispatch, state.users]\r\n  );\r\n\r\n  const { user, onLogIn, onLogOut, loading } = useUser(onUserLoaded, dispatch);\r\n  const [socket, connected] = useSocket(user, dispatch);\r\n\r\n  /** Socket joins specific rooms once they are added */\r\n  useEffect(() => {\r\n    if (user === null) {\r\n      /** We are logged out */\r\n      /** But it's necessary to pre-populate the main room, so the user won't wait for messages once he's logged in */\r\n      return;\r\n    }\r\n    if (connected) {\r\n      /**\r\n       * The socket needs to be joined to the newly added rooms\r\n       * on an active connection.\r\n       */\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: true });\r\n        socket.emit(\"room.join\", room.id);\r\n      });\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    } else {\r\n      /**\r\n       * It's necessary to set disconnected flags on rooms\r\n       * once the client is not connected\r\n       */\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (!room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: false });\r\n      });\r\n      /** Only update the state if it's only necessary */\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    }\r\n  }, [user, connected, dispatch, socket, state.rooms, state.users]);\r\n\r\n  /** Populate default rooms when user is not null */\r\n  useEffect(() => {\r\n    if (Object.values(state.rooms).length === 0 && user !== null) {\r\n      /** Then get rooms. */\r\n      getRooms(user.id).then((rooms) => {\r\n        const payload = [];\r\n        rooms.forEach(({ id, names }) => {\r\n          payload.push({ id, name: parseRoomName(names, user.username) });\r\n        });\r\n        /** Here we also can populate the state with default chat rooms */\r\n        dispatch({\r\n          type: \"set rooms\",\r\n          payload,\r\n        });\r\n        dispatch({ type: \"set current room\", payload: \"0\" });\r\n      });\r\n    }\r\n  }, [dispatch, state.rooms, user]);\r\n\r\n  const onMessageSend = useCallback(\r\n    (message, roomId) => {\r\n      if (typeof message !== \"string\" || message.trim().length === 0) {\r\n        return;\r\n      }\r\n      if (!socket) {\r\n        /** Normally there shouldn't be such case. */\r\n        console.error(\"Couldn't send message\");\r\n      }\r\n      socket.emit(\"message\", {\r\n        roomId: roomId,\r\n        message,\r\n        from: user.id,\r\n        date: moment(new Date()).unix(),\r\n      });\r\n    },\r\n    [user, socket]\r\n  );\r\n\r\n  return {\r\n    loading,\r\n    user,\r\n    state,\r\n    dispatch,\r\n    onLogIn,\r\n    onMessageSend,\r\n    onLogOut,\r\n  };\r\n};\r\n\r\nexport default App;\r\n","// @ts-check\nimport { useEffect, useRef, useState } from \"react\";\nimport { getMe, login, logOut } from \"./api\";\nimport io from \"socket.io-client\";\nimport { parseRoomName } from \"./utils\";\n\n/**\n * @param {import('./state').UserEntry} newUser\n */\nconst updateUser = (newUser, dispatch, infoMessage) => {\n  dispatch({ type: \"set user\", payload: newUser });\n  if (infoMessage !== undefined) {\n    dispatch({\n      type: \"append message\",\n      payload: {\n        id: \"0\",\n        message: {\n          /** Date isn't shown in the info message, so we only need a unique value */\n          date: Math.random() * 10000,\n          from: \"info\",\n          message: infoMessage,\n        },\n      },\n    });\n  }\n};\n\n/** @returns {[SocketIOClient.Socket, boolean]} */\nconst useSocket = (user, dispatch) => {\n  const [connected, setConnected] = useState(false);\n  /** @type {React.MutableRefObject<SocketIOClient.Socket>} */\n  const socketRef = useRef(null);\n  const socket = socketRef.current;\n\n  /** First of all it's necessary to handle the socket io connection */\n  useEffect(() => {\n    if (user === null) {\n      if (socket !== null) {\n        socket.disconnect();\n      }\n      setConnected(false);\n    } else {\n      if (socket !== null) {\n        socket.connect();\n      } else {\n        socketRef.current = io();\n      }\n      setConnected(true);\n    }\n  }, [user, socket]);\n\n  /**\n   * Once we are sure the socket io object is initialized\n   * Add event listeners.\n   */\n  useEffect(() => {\n    if (connected && user) {\n      socket.on(\"show.room\", (room) => {\n        console.log({ user });\n        dispatch({\n          type: \"add room\",\n          payload: {\n            id: room.id,\n            name: parseRoomName(room.names, user.username),\n          },\n        });\n      });\n      socket.on(\"message\", (message) => {\n        /** Set user online */\n        dispatch({\n          type: \"make user online\",\n          payload: message.from,\n        });\n        dispatch({\n          type: \"append message\",\n          payload: { id: message.roomId === undefined ? \"0\" : message.roomId, message },\n        });\n      });\n    } else {\n      /** If there was a log out, we need to clear existing listeners on an active socket connection */\n      if (socket) {\n        socket.off(\"user.room\");\n        socket.off(\"message\");\n      }\n    }\n  }, [connected, user, dispatch, socket]);\n\n  return [socket, connected];\n};\n\n/** User management hook. */\nconst useUser = (onUserLoaded = (user) => { }, dispatch) => {\n  const [loading, setLoading] = useState(true);\n  /** @type {[import('./state.js').UserEntry | null, React.Dispatch<import('./state.js').UserEntry>]} */\n  const [user, setUser] = useState(null);\n  /** Callback used in log in form. */\n  const onLogIn = (\n    username = \"\",\n    password = \"\",\n    onError = (val = null) => { },\n    onLoading = (loading = false) => { }\n  ) => {\n    onError(null);\n    onLoading(true);\n    login(username, password)\n      .then((x) => {\n        setUser(x);\n      })\n      .catch((e) => onError(e.message))\n      .finally(() => onLoading(false));\n  };\n\n  /** Log out form */\n  const onLogOut = async () => {\n    logOut().then(() => {\n      setUser(null);\n      /** This will clear the store, to completely re-initialize an app on the next login. */\n      dispatch({ type: \"clear\" });\n      setLoading(true);\n    });\n  };\n\n  /** Runs once when the component is mounted to check if there's user stored in cookies */\n  useEffect(() => {\n    if (!loading) {\n      return;\n    }\n    getMe().then((user) => {\n      setUser(user);\n      setLoading(false);\n      onUserLoaded(user);\n    });\n  }, [onUserLoaded, loading]);\n\n  return { user, onLogIn, onLogOut, loading };\n};\n\nexport {\n  updateUser,\n  useSocket,\n  useUser\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/style-overrides.css\";\r\nimport \"./styles/style.css\";\r\nimport \"./styles/font-face.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}